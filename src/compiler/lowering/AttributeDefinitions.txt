/*
 * Copyright 2021 The DAPHNE Consortium
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef SRC_COMPILER_LOWERING_ATTRIBUTEDEFINITIONS_H
#define SRC_COMPILER_LOWERING_ATTRIBUTEDEFINITIONS_H

#include "mlir/IR/BuiltinAttributes.h"
#include "mlir/IR/Attributes.h"
#include "papiStdEventDefs.h"
#include <string>

//using namespace mlir::daphne;

const std::string ATTR_HASVARIADICRESULTS = "hasVariadicResults";
const std::string ATTR_UPDATEINPLACE_KEY = "updateInPlace";

enum class ATTR_UPDATEINPLACE_TYPE {
    NONE,
    LHS,
    RHS,
    BOTH,
 };

//create an attribute class for the updateInPlace attribute, that holds the information
//which operand is updated in place

/*

namespace mlir {

class UpdateInPlaceStorage : public mlir::AttributeStorage {
public:
    UpdateInPlaceStorage(ATTR_UPDATEINPLACE_TYPE type) : type(type) {}

    using KeyTy = ATTR_UPDATEINPLACE_TYPE;

    bool operator==(const KeyTy &key) const { return key == type; }

    static UpdateInPlaceStorage *construct(mlir::AttributeStorageAllocator &allocator, const KeyTy &key) {
        return new (allocator.allocate<UpdateInPlaceStorage>()) UpdateInPlaceStorage(key);
    }

    static llvm::hash_code hashKey(const KeyTy &key) { return llvm::hash_value(key); }

    ATTR_UPDATEINPLACE_TYPE type;
};

class UpdateInPlaceAttr : public mlir::Attribute::AttrBase<UpdateInPlaceAttr, mlir::Attribute,
        mlir::UpdateInPlaceStorage> {
public:
    using Base::Base;

    static UpdateInPlaceAttr get(mlir::MLIRContext *ctx, ATTR_UPDATEINPLACE_TYPE type) {
        return Base::get(ctx, type);
    }

    ATTR_UPDATEINPLACE_TYPE getType() const { return getImpl()->type; }

    static StringRef getAttrName() { return ATTR_UPDATEINPLACE_KEY; }

};

} // namespace mlir

*/

#endif //SRC_COMPILER_LOWERING_ATTRIBUTEDEFINITIONS_H